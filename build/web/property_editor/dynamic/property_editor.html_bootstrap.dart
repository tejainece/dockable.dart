library app_bootstrap;

import 'package:polymer/polymer.dart';

import 'package:dockable/icon/icon_view.dart' as i0;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/iconbutton/icon_button.dart' as i1;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_editor.dart' as i2;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_text.dart' as i3;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_editor.dart' as i4;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_editor.dart' as i5;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_editor.dart' as i6;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/colorpicker/color_picker.dart' as i7;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/colorpicker/color_picker.dart' as i8;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/colorpicker/color_picker.dart' as i9;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_editor.dart' as i10;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/optionbox/optionbox_item_plain1.dart' as i11;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/optionbox/optionbox.dart' as i12;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_editor.dart' as i13;
import 'package:polymer/src/build/log_injector.dart';
import 'package:dockable/propertyeditor/property_editor.dart' as i14;
import 'package:polymer/src/build/log_injector.dart';
import 'property_editor.dart' as i15;
import 'package:polymer/src/build/log_injector.dart';
import 'package:smoke/smoke.dart' show Declaration, PROPERTY, METHOD;
import 'package:smoke/static.dart' show useGeneratedCode, StaticConfiguration;
import 'package:dockable/icon/icon_view.dart' as smoke_0;
import 'package:polymer/polymer.dart' as smoke_1;
import 'package:observe/src/metadata.dart' as smoke_2;
import 'package:dockable/iconbutton/icon_button.dart' as smoke_3;
import 'package:dockable/propertyeditor/property_editor.dart' as smoke_4;
import 'dart:html' as smoke_5;
import 'package:dockable/utils/dockable_utils.dart' as smoke_6;
import 'package:observe/src/observable_list.dart' as smoke_7;
import 'package:dockable/propertyeditor/property_text.dart' as smoke_8;
import 'package:dockable/colorpicker/color_picker.dart' as smoke_9;
import 'package:dockable/optionbox/optionbox_item_plain1.dart' as smoke_10;
import 'package:dockable/optionbox/optionbox.dart' as smoke_11;
import 'package:dockable/selector/selector.dart' as smoke_12;
abstract class _M0 {} // PolymerElement & ChangeNotifier
abstract class _M1 {} // HtmlElement & Polymer
abstract class _M2 {} // _M1 & ChangeNotifier
abstract class _M3 {} // PropertyBase & ChangeNotifier

void main() {
  useGeneratedCode(new StaticConfiguration(
      checkedMode: false,
      getters: {
        #ICON_SIZE: (o) => o.ICON_SIZE,
        #PADDING_SIZE: (o) => o.PADDING_SIZE,
        #activateEvent: (o) => o.activateEvent,
        #always: (o) => o.always,
        #blue: (o) => o.blue,
        #breadth: (o) => o.breadth,
        #breadthChanged: (o) => o.breadthChanged,
        #checked: (o) => o.checked,
        #checkedChanged: (o) => o.checkedChanged,
        #closed: (o) => o.closed,
        #description: (o) => o.description,
        #editable: (o) => o.editable,
        #editableChanged: (o) => o.editableChanged,
        #green: (o) => o.green,
        #handleBlur: (o) => o.handleBlur,
        #handleCursorStart: (o) => o.handleCursorStart,
        #handleKeydown: (o) => o.handleKeydown,
        #heading: (o) => o.heading,
        #headingClicked: (o) => o.headingClicked,
        #height: (o) => o.height,
        #heightChanged: (o) => o.heightChanged,
        #hue: (o) => o.hue,
        #hueChanged: (o) => o.hueChanged,
        #icon: (o) => o.icon,
        #items: (o) => o.items,
        #label: (o) => o.label,
        #length: (o) => o.length,
        #max: (o) => o.max,
        #maxChanged: (o) => o.maxChanged,
        #min: (o) => o.min,
        #minChanged: (o) => o.minChanged,
        #multi: (o) => o.multi,
        #multiChanged: (o) => o.multiChanged,
        #open: (o) => o.open,
        #openChanged: (o) => o.openChanged,
        #red: (o) => o.red,
        #select: (o) => o.select,
        #selected: (o) => o.selected,
        #selectedItem: (o) => o.selectedItem,
        #showMenu: (o) => o.showMenu,
        #size: (o) => o.size,
        #sizeChanged: (o) => o.sizeChanged,
        #sorted: (o) => o.sorted,
        #src: (o) => o.src,
        #srcChanged: (o) => o.srcChanged,
        #startEditing: (o) => o.startEditing,
        #step: (o) => o.step,
        #target: (o) => o.target,
        #targetChanged: (o) => o.targetChanged,
        #toInt: (o) => o.toInt,
        #toString: (o) => o.toString,
        #togglable: (o) => o.togglable,
        #togglableChanged: (o) => o.togglableChanged,
        #value: (o) => o.value,
        #valueChanged: (o) => o.valueChanged,
        #vertical: (o) => o.vertical,
        #verticalChanged: (o) => o.verticalChanged,
        #width: (o) => o.width,
        #widthChanged: (o) => o.widthChanged,
      },
      setters: {
        #activateEvent: (o, v) { o.activateEvent = v; },
        #always: (o, v) { o.always = v; },
        #blue: (o, v) { o.blue = v; },
        #breadth: (o, v) { o.breadth = v; },
        #checked: (o, v) { o.checked = v; },
        #closed: (o, v) { o.closed = v; },
        #description: (o, v) { o.description = v; },
        #editable: (o, v) { o.editable = v; },
        #green: (o, v) { o.green = v; },
        #heading: (o, v) { o.heading = v; },
        #height: (o, v) { o.height = v; },
        #hue: (o, v) { o.hue = v; },
        #icon: (o, v) { o.icon = v; },
        #items: (o, v) { o.items = v; },
        #label: (o, v) { o.label = v; },
        #max: (o, v) { o.max = v; },
        #min: (o, v) { o.min = v; },
        #multi: (o, v) { o.multi = v; },
        #open: (o, v) { o.open = v; },
        #red: (o, v) { o.red = v; },
        #selected: (o, v) { o.selected = v; },
        #size: (o, v) { o.size = v; },
        #sorted: (o, v) { o.sorted = v; },
        #src: (o, v) { o.src = v; },
        #step: (o, v) { o.step = v; },
        #target: (o, v) { o.target = v; },
        #togglable: (o, v) { o.togglable = v; },
        #value: (o, v) { o.value = v; },
        #vertical: (o, v) { o.vertical = v; },
        #width: (o, v) { o.width = v; },
      },
      parents: {
        smoke_9.ColorPicker: _M0,
        smoke_9.HsvPicker: _M0,
        smoke_9.HueSlider: _M0,
        smoke_0.IconView: _M0,
        smoke_3.IconButton: _M0,
        smoke_3.IconListButton: _M0,
        smoke_3.IconOptionsButton: _M0,
        smoke_11.OptionBox: smoke_12.SelectorHelper,
        smoke_11.OptionboxItem: _M0,
        smoke_10.OptionboxItemPlain1: _M0,
        smoke_4.PropertyBase: smoke_1.PolymerElement,
        smoke_4.PropertyCategory: _M0,
        smoke_4.PropertyColor: _M3,
        smoke_4.PropertyDropdown: _M3,
        smoke_4.PropertyEditor: smoke_1.PolymerElement,
        smoke_4.PropertyInteger: _M3,
        smoke_4.PropertyItem: _M0,
        smoke_4.PropertyNumber: _M3,
        smoke_8.PropertyText: _M3,
        smoke_12.SelectorHelper: _M0,
        smoke_1.PolymerElement: _M2,
        _M0: smoke_1.PolymerElement,
        _M1: smoke_5.HtmlElement,
        _M2: _M1,
        _M3: smoke_4.PropertyBase,
      },
      declarations: {
        smoke_9.ColorPicker: {
          #blue: const Declaration(#blue, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #green: const Declaration(#green, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #red: const Declaration(#red, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #size: const Declaration(#size, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #sizeChanged: const Declaration(#sizeChanged, Function, kind: METHOD),
        },
        smoke_9.HsvPicker: {
          #size: const Declaration(#size, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #sizeChanged: const Declaration(#sizeChanged, Function, kind: METHOD),
        },
        smoke_9.HueSlider: {
          #breadth: const Declaration(#breadth, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #breadthChanged: const Declaration(#breadthChanged, Function, kind: METHOD),
          #hue: const Declaration(#hue, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #hueChanged: const Declaration(#hueChanged, Function, kind: METHOD),
          #size: const Declaration(#size, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #sizeChanged: const Declaration(#sizeChanged, Function, kind: METHOD),
          #vertical: const Declaration(#vertical, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #verticalChanged: const Declaration(#verticalChanged, Function, kind: METHOD),
        },
        smoke_0.IconView: {
          #height: const Declaration(#height, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #heightChanged: const Declaration(#heightChanged, Function, kind: METHOD),
          #src: const Declaration(#src, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #srcChanged: const Declaration(#srcChanged, Function, kind: METHOD),
          #width: const Declaration(#width, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #widthChanged: const Declaration(#widthChanged, Function, kind: METHOD),
        },
        smoke_3.IconButton: {
          #ICON_SIZE: const Declaration(#ICON_SIZE, num, kind: PROPERTY, isFinal: true, annotations: const [smoke_2.observable]),
          #PADDING_SIZE: const Declaration(#PADDING_SIZE, num, kind: PROPERTY, isFinal: true, annotations: const [smoke_2.observable]),
          #checked: const Declaration(#checked, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #checkedChanged: const Declaration(#checkedChanged, Function, kind: METHOD),
          #height: const Declaration(#height, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #heightChanged: const Declaration(#heightChanged, Function, kind: METHOD),
          #src: const Declaration(#src, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #togglable: const Declaration(#togglable, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #togglableChanged: const Declaration(#togglableChanged, Function, kind: METHOD),
          #width: const Declaration(#width, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #widthChanged: const Declaration(#widthChanged, Function, kind: METHOD),
        },
        smoke_3.IconListButton: {
          #height: const Declaration(#height, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #heightChanged: const Declaration(#heightChanged, Function, kind: METHOD),
          #open: const Declaration(#open, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #openChanged: const Declaration(#openChanged, Function, kind: METHOD),
          #src: const Declaration(#src, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #width: const Declaration(#width, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #widthChanged: const Declaration(#widthChanged, Function, kind: METHOD),
        },
        smoke_3.IconOptionsButton: {
          #ICON_SIZE: const Declaration(#ICON_SIZE, num, kind: PROPERTY, isFinal: true, annotations: const [smoke_2.observable]),
          #PADDING_SIZE: const Declaration(#PADDING_SIZE, num, kind: PROPERTY, isFinal: true, annotations: const [smoke_2.observable]),
          #checked: const Declaration(#checked, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #height: const Declaration(#height, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #heightChanged: const Declaration(#heightChanged, Function, kind: METHOD),
          #open: const Declaration(#open, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #openChanged: const Declaration(#openChanged, Function, kind: METHOD),
          #src: const Declaration(#src, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #togglable: const Declaration(#togglable, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #width: const Declaration(#width, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #widthChanged: const Declaration(#widthChanged, Function, kind: METHOD),
        },
        smoke_11.OptionBox: {},
        smoke_11.OptionboxItem: {
          #height: const Declaration(#height, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #heightChanged: const Declaration(#heightChanged, Function, kind: METHOD),
          #label: const Declaration(#label, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
        },
        smoke_10.OptionboxItemPlain1: {
          #label: const Declaration(#label, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
        },
        smoke_4.PropertyBase: {},
        smoke_4.PropertyCategory: {
          #closed: const Declaration(#closed, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #heading: const Declaration(#heading, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #sorted: const Declaration(#sorted, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
        },
        smoke_4.PropertyColor: {
          #editable: const Declaration(#editable, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #editableChanged: const Declaration(#editableChanged, Function, kind: METHOD),
          #value: const Declaration(#value, smoke_6.ColorVal, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #valueChanged: const Declaration(#valueChanged, Function, kind: METHOD),
        },
        smoke_4.PropertyDropdown: {
          #editable: const Declaration(#editable, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #editableChanged: const Declaration(#editableChanged, Function, kind: METHOD),
          #items: const Declaration(#items, smoke_7.ObservableList, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #value: const Declaration(#value, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #valueChanged: const Declaration(#valueChanged, Function, kind: METHOD),
        },
        smoke_4.PropertyEditor: {
          #description: const Declaration(#description, String, kind: PROPERTY, isFinal: true, annotations: const [smoke_2.observable]),
        },
        smoke_4.PropertyInteger: {
          #editable: const Declaration(#editable, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #editableChanged: const Declaration(#editableChanged, Function, kind: METHOD),
          #max: const Declaration(#max, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #maxChanged: const Declaration(#maxChanged, Function, kind: METHOD),
          #min: const Declaration(#min, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #minChanged: const Declaration(#minChanged, Function, kind: METHOD),
          #step: const Declaration(#step, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #value: const Declaration(#value, int, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #valueChanged: const Declaration(#valueChanged, Function, kind: METHOD),
        },
        smoke_4.PropertyItem: {
          #description: const Declaration(#description, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #heading: const Declaration(#heading, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
        },
        smoke_4.PropertyNumber: {
          #editable: const Declaration(#editable, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #editableChanged: const Declaration(#editableChanged, Function, kind: METHOD),
          #max: const Declaration(#max, num, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #maxChanged: const Declaration(#maxChanged, Function, kind: METHOD),
          #min: const Declaration(#min, num, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #minChanged: const Declaration(#minChanged, Function, kind: METHOD),
          #step: const Declaration(#step, num, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #value: const Declaration(#value, num, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #valueChanged: const Declaration(#valueChanged, Function, kind: METHOD),
        },
        smoke_8.PropertyText: {
          #editable: const Declaration(#editable, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #editableChanged: const Declaration(#editableChanged, Function, kind: METHOD),
          #value: const Declaration(#value, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #valueChanged: const Declaration(#valueChanged, Function, kind: METHOD),
        },
        smoke_12.SelectorHelper: {
          #activateEvent: const Declaration(#activateEvent, String, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #always: const Declaration(#always, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #multi: const Declaration(#multi, bool, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #multiChanged: const Declaration(#multiChanged, Function, kind: METHOD),
          #selected: const Declaration(#selected, List, kind: PROPERTY),
          #selectedItem: const Declaration(#selectedItem, dynamic, kind: PROPERTY, isFinal: true, annotations: const [smoke_2.observable]),
          #target: const Declaration(#target, dynamic, kind: PROPERTY, annotations: const [smoke_2.reflectable, smoke_1.published]),
          #targetChanged: const Declaration(#targetChanged, Function, kind: METHOD),
        },
        smoke_1.PolymerElement: {},
      },
      names: {
        #ICON_SIZE: r'ICON_SIZE',
        #PADDING_SIZE: r'PADDING_SIZE',
        #activateEvent: r'activateEvent',
        #always: r'always',
        #blue: r'blue',
        #breadth: r'breadth',
        #breadthChanged: r'breadthChanged',
        #checked: r'checked',
        #checkedChanged: r'checkedChanged',
        #closed: r'closed',
        #description: r'description',
        #editable: r'editable',
        #editableChanged: r'editableChanged',
        #green: r'green',
        #handleBlur: r'handleBlur',
        #handleCursorStart: r'handleCursorStart',
        #handleKeydown: r'handleKeydown',
        #heading: r'heading',
        #headingClicked: r'headingClicked',
        #height: r'height',
        #heightChanged: r'heightChanged',
        #hue: r'hue',
        #hueChanged: r'hueChanged',
        #icon: r'icon',
        #items: r'items',
        #label: r'label',
        #length: r'length',
        #max: r'max',
        #maxChanged: r'maxChanged',
        #min: r'min',
        #minChanged: r'minChanged',
        #multi: r'multi',
        #multiChanged: r'multiChanged',
        #open: r'open',
        #openChanged: r'openChanged',
        #red: r'red',
        #select: r'select',
        #selected: r'selected',
        #selectedItem: r'selectedItem',
        #showMenu: r'showMenu',
        #size: r'size',
        #sizeChanged: r'sizeChanged',
        #sorted: r'sorted',
        #src: r'src',
        #srcChanged: r'srcChanged',
        #startEditing: r'startEditing',
        #step: r'step',
        #target: r'target',
        #targetChanged: r'targetChanged',
        #toInt: r'toInt',
        #toString: r'toString',
        #togglable: r'togglable',
        #togglableChanged: r'togglableChanged',
        #value: r'value',
        #valueChanged: r'valueChanged',
        #vertical: r'vertical',
        #verticalChanged: r'verticalChanged',
        #width: r'width',
        #widthChanged: r'widthChanged',
      }));
  new LogInjector().injectLogsFromUrl('property_editor.html._buildLogs');
  configureForDeployment([
      () => Polymer.register('icon-view', i0.IconView),
      () => Polymer.register('icon-button', i1.IconButton),
      () => Polymer.register('icon-list-button', i1.IconListButton),
      () => Polymer.register('icon-options-button', i1.IconOptionsButton),
      () => Polymer.register('property-editor', i14.PropertyEditor),
      () => Polymer.register('property-category', i14.PropertyCategory),
      () => Polymer.register('property-item', i14.PropertyItem),
      () => Polymer.register('property-number', i14.PropertyNumber),
      () => Polymer.register('property-integer', i14.PropertyInteger),
      () => Polymer.register('property-color', i14.PropertyColor),
      () => Polymer.register('property-dropdown', i14.PropertyDropdown),
      () => Polymer.register('property-text', i3.PropertyText),
      () => Polymer.register('property-editor', i14.PropertyEditor),
      () => Polymer.register('property-category', i14.PropertyCategory),
      () => Polymer.register('property-item', i14.PropertyItem),
      () => Polymer.register('property-number', i14.PropertyNumber),
      () => Polymer.register('property-integer', i14.PropertyInteger),
      () => Polymer.register('property-color', i14.PropertyColor),
      () => Polymer.register('property-dropdown', i14.PropertyDropdown),
      () => Polymer.register('property-editor', i14.PropertyEditor),
      () => Polymer.register('property-category', i14.PropertyCategory),
      () => Polymer.register('property-item', i14.PropertyItem),
      () => Polymer.register('property-number', i14.PropertyNumber),
      () => Polymer.register('property-integer', i14.PropertyInteger),
      () => Polymer.register('property-color', i14.PropertyColor),
      () => Polymer.register('property-dropdown', i14.PropertyDropdown),
      () => Polymer.register('property-editor', i14.PropertyEditor),
      () => Polymer.register('property-category', i14.PropertyCategory),
      () => Polymer.register('property-item', i14.PropertyItem),
      () => Polymer.register('property-number', i14.PropertyNumber),
      () => Polymer.register('property-integer', i14.PropertyInteger),
      () => Polymer.register('property-color', i14.PropertyColor),
      () => Polymer.register('property-dropdown', i14.PropertyDropdown),
      () => Polymer.register('color-picker', i9.ColorPicker),
      () => Polymer.register('hsv-picker', i9.HsvPicker),
      () => Polymer.register('hue-slider', i9.HueSlider),
      () => Polymer.register('color-picker', i9.ColorPicker),
      () => Polymer.register('hsv-picker', i9.HsvPicker),
      () => Polymer.register('hue-slider', i9.HueSlider),
      () => Polymer.register('color-picker', i9.ColorPicker),
      () => Polymer.register('hsv-picker', i9.HsvPicker),
      () => Polymer.register('hue-slider', i9.HueSlider),
      () => Polymer.register('property-editor', i14.PropertyEditor),
      () => Polymer.register('property-category', i14.PropertyCategory),
      () => Polymer.register('property-item', i14.PropertyItem),
      () => Polymer.register('property-number', i14.PropertyNumber),
      () => Polymer.register('property-integer', i14.PropertyInteger),
      () => Polymer.register('property-color', i14.PropertyColor),
      () => Polymer.register('property-dropdown', i14.PropertyDropdown),
      () => Polymer.register('optionbox-item-plain1', i11.OptionboxItemPlain1),
      () => Polymer.register('option-box', i12.OptionBox),
      () => Polymer.register('optionbox-item', i12.OptionboxItem),
      () => Polymer.register('property-editor', i14.PropertyEditor),
      () => Polymer.register('property-category', i14.PropertyCategory),
      () => Polymer.register('property-item', i14.PropertyItem),
      () => Polymer.register('property-number', i14.PropertyNumber),
      () => Polymer.register('property-integer', i14.PropertyInteger),
      () => Polymer.register('property-color', i14.PropertyColor),
      () => Polymer.register('property-dropdown', i14.PropertyDropdown),
      () => Polymer.register('property-editor', i14.PropertyEditor),
      () => Polymer.register('property-category', i14.PropertyCategory),
      () => Polymer.register('property-item', i14.PropertyItem),
      () => Polymer.register('property-number', i14.PropertyNumber),
      () => Polymer.register('property-integer', i14.PropertyInteger),
      () => Polymer.register('property-color', i14.PropertyColor),
      () => Polymer.register('property-dropdown', i14.PropertyDropdown),
    ]);
  i15.main();
}
